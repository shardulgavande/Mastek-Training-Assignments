Udemy Section 3: Postgre Sql
1.	Unique regions suppliers are in?
select DISTINCT region
FROM suppliers;

2.	How many orders have we had?
select COUNT(*)
FROM orders

3.	How many distinct products have been ordered (user order details)
select COUNT(DISTINCT (productid))
FROM order_details;

4.	Select the amount spent on order_details
Select orderid, unitprice*quantity
FROM order_details;

Pagila DB
1.	Select all fields, and all records from actor table
SELECT * FROM actor;

2.	Select all fields and records from film table
SELECT * FROM film;

3.	Select all fields and records from the staff table
SELECT * FROM staff;

4.	Select address and district columns from address table
SELECT address, district from address;

5.	Select title and description from film table
SELECT title, description from film;

6.	Select city and country_id from city table
SELECT city, country_id FROM city;

7.	Select all the distinct last names from customer table
SELECT distinct(last_name) 
FROM customer;

8.	Select all the distinct first names from the actor table
SELECT distinct(first_name) 
FROM actor;

9.	Select all the distinct inventory_id values from rental table
SELECT distinct(inventory_id) 
FROM rental;

10.	Find the number of films ( COUNT ).
SELECT COUNT(*)
FROM film;

11.	Find the number of categories.
SELECT COUNT(*)
FROM category;

12.	Find the number of distinct first names in actor table
SELECT DISTINCT(first_name)
FROM actor;

13.	Select rental_id and the difference between return_date and rental_date in rental table
SELECT rental_id, return_date-rental_date as difference_date
FROM rental;




Section 4 - Assginment

Select all records from data_src which came from the journal named 'Food Chemistry'.
--Select all records from data_src which came from the journal named 'Food Chemistry'.

Select record from nutr_def where nutrdesc is Retinol.
--Select record from nutr_def where nutrdesc is Retinol.

Find all the food descriptions (food_des) records for manufacturer Kellogg, Co. (must include punctuation for exact match).
--SELECT * from food_des WHERE manufacname = 'Kellogg, Co.'	

Find the number of records in data sources (data_src) that were published after year 2000 (it is numeric field).
-- SELECT * from data_src WHERE year > 2000	

Find the number of records in food description that have a fat_factor < 4.
--SELECT * from food_des WHERE fat_factor < 4	

Select all records from weight table that have gm_weight of 190.
--SELECT * from weight WHERE gm_wgt = 190	

Find the number of records in food description table that have pro_factor greater than 1.5 and fat_factor less than 5.
--SELECT * from food_des WHERE pro_factor > 1.5 AND fat_factor < 5

Find the record in data source table that is from year 1990 and the journal Cereal Foods World.
--SELECT * from data_src WHERE year = 1990 AND journal = 'Cereal Foods World'

Select count of weights where gm_wgt is greater than 150 and less than 200.
--SELECT COUNT(*) FROM weight WHERE gm_wgt > 150 AND gm_wgt < 200

Select the records in nutr_def table (nutrition definitions) that have units of kj or kcal.
--SELECT * FROM nutr_def WHERE units = 'kcal' OR units= 'g'

Select all records from data source table (data_src) that where from the year 2000 or the journal Food Chemistry.
--SELECT * FROM data_src WHERE year > 2000 OR journal = 'Food Chemistry'

How many records in food_des are not about food group Breakfast Cereals.  The field fdgrp_cd is an id field and you will have to find it in fd_group for fddrp_desc = ' Breakfast Cereals'.
--SELECT * FROM food_des WHERE fdgrp_cd NOT IN (SELECT fdgrp_cd FROM fd_group WHERE fddrp_desc = 'Breakfast Cereals')

Find all the records in data sources that where between 1990 and 2000 and either 'J. Food Protection' or 'Food Chemistry'.
--SELECT * FROM data_src WHERE year BETWEEN 1990 AND 2000 AND (journal = 'J. Food Protection' OR journal = 'Food Chemistry')

Use BETWEEN syntax to find number of weight records that weight between 50 and 75 grams (gm_wgt).
--SELECT * FROM weight WHERE gm_wgt BETWEEN 50 AND 75

Select all records from the data source table that were published in years 1960,1970,1980,1990, and 2000.  Use the IN syntax.
--SELECT * FROM data_src WHERE year IN (1960,1970,1980,1990,2000)



	
Section 7 Assignment

Return the name, weight, and productnumber of  all the products  ordered by weight from lightest to heaviest.  (Remember to use schema to reach table.  It is in production schema.)
--SELECT name,weight, productnumber FROM production.product ORDER BY weight

Return the records from productvendor for productid = 407 in order of averageleadtime from shortest to longest. (You'll have to figure out which schema this is in.)
--SELECT * FROM purchasing.productvendor
WHERE productid = 407
ORDER BY averageleadtime

Find all the salesorderdetail records for productid 799 and order them by largest orderqty to smallest.
--SELECT * FROM sales.salesorderdetail
WHERE productid = 799
ORDER BY orderqty DESC

What is the largest  discount percentage offered in the specialoffer table.
--SELECT * FROM sales.salesorderdetail
WHERE MAX(specialofferid)

Find the smallest number of sickleavehours for an employee.
--SELECT MIN(sickleavehours) FROM humanresources.employee

Find the largest rejected quantity in the purchaseorderdetail table.
--SELECT MAX(rejectedqty) FROM purchasing.purchaseorderdetail

Find the average rate from employeepayhistory table.
--SELECT AVG(rate) FROM humanresources.employeepayhistory

Find the average standardcost in the productcosthistory table for productid 738.
--SELECT AVG(standardcost) FROM production.productcosthistory

Find the sum of scrappedqty from the workorder table for productid 529.
--SELECT SUM(scrappedqty) FROM production.workorder
WHERE productid = 529

Find all vendor names with a name that starts with letter G.
--SELECT name FROM purchasing.vendor
WHERE name LIKE 'G%'

Find all vendor names that have the word Bike in them.
--SELECT name FROM purchasing.vendor
WHERE name LIKE '%Bike%'

Search the person table for every firstname that has t as a second letter
--SELECT firstname FROM person.person
WHERE firstname LIKE '_t%'

Return the first 20 records from emailaddress table.
--SELECT * FROM person.emailaddress
LIMIT 20

Return the first 2 records from productcategory table.
--SELECT * FROM production.productcategory
LIMIT 2

How many product records have a missing weight value.
--SELECT * FROM production.product
WHERE weight IS NULL

How many person records have an additionalcontactinfo field that has a value.
--SELECT * FROM person.person
WHERE additionalcontactinfo IS NOT NULL



Section 8 - Assignment

Join (with inner join) together person, personphone, businessentity and phonenumber type in the persons schema.  Return first name, middle name, last name, phone number and the name of the phone number type (home, office, etc.)  Order by business entity id descending.
--SELECT p.firstname, p.middlename, p.lastname, pp.phonenumber, pt.name
FROM person.person p
INNER JOIN person.personphone pp 
ON p.businessentityid = pp.businessentityid
INNER JOIN person.phonenumbertype pt
ON pt.phonenumbertypeid = pp.phonenumbertypeid
ORDER BY pp.businessentityid DESC

Join (Inner) productmodel, productmodelproductiondescriptionculture, productdescription and culture from the production schema.  Return the productmodel name, culture name, and productdescription description ordered by the product model name.
--SELECT pm.name, c.name, pd.description
FROM production.productmodel as pm
INNER JOIN production.productmodelproductdescriptionculture as pdc
ON pm.productmodelid = pdc.productmodelid
INNER JOIN production.culture c
ON c.cultureid = pdc.cultureid
INNER JOIN production.productdescription as pd
ON pd.productdescriptionid = pdc.productdescriptionid
ORDER BY pm.name


Add a join to previous example to production.product and return the product name field in addition to other information.
--SELECT pm.name, c.name, pd.description, prod.name
FROM production.productmodel as pm
INNER JOIN production.productmodelproductdescriptionculture as pdc
ON pm.productmodelid = pdc.productmodelid
INNER JOIN production.culture c
ON c.cultureid = pdc.cultureid
INNER JOIN production.productdescription as pd
ON pd.productdescriptionid = pdc.productdescriptionid
INNER JOIN production.product as prod
ON prod.productmodelid  = pm.productmodelid
ORDER BY pm.name

Join product and productreview in the schema table.  Include every record from product and any reviews they have.  Return the product name, review rating and comments.  Order by rating in ascending order.
--SELECT p.name, pr.rating, pr.comments
FROM production.product as p
INNER JOIN production.productreview as pr
ON p.productid = pr.productid
ORDER BY rating

Use a right join to combine workorder and product from production schema to bring back all products and any work orders they have.  Include the product name and workorder orderqty and scrappedqty fields.  Order by productid ascending.
--SELECT p.name, w.orderqty, w.scrappedqty
FROM production.workorder as w
RIGHT JOIN production.product as p
ON p.productid = w.productid
ORDER BY p.productid ASC




